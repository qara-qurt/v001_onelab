// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	model "v001_onelab/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockIOrderBook is a mock of IOrderBook interface.
type MockIOrderBook struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderBookMockRecorder
}

// MockIOrderBookMockRecorder is the mock recorder for MockIOrderBook.
type MockIOrderBookMockRecorder struct {
	mock *MockIOrderBook
}

// NewMockIOrderBook creates a new mock instance.
func NewMockIOrderBook(ctrl *gomock.Controller) *MockIOrderBook {
	mock := &MockIOrderBook{ctrl: ctrl}
	mock.recorder = &MockIOrderBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderBook) EXPECT() *MockIOrderBookMockRecorder {
	return m.recorder
}

// GetOrderBooks mocks base method.
func (m *MockIOrderBook) GetOrderBooks() ([]model.OrderBook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderBooks")
	ret0, _ := ret[0].([]model.OrderBook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderBooks indicates an expected call of GetOrderBooks.
func (mr *MockIOrderBookMockRecorder) GetOrderBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderBooks", reflect.TypeOf((*MockIOrderBook)(nil).GetOrderBooks))
}

// GetOrderUserBooks mocks base method.
func (m *MockIOrderBook) GetOrderUserBooks() ([]model.UserOrderBooksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderUserBooks")
	ret0, _ := ret[0].([]model.UserOrderBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderUserBooks indicates an expected call of GetOrderUserBooks.
func (mr *MockIOrderBookMockRecorder) GetOrderUserBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderUserBooks", reflect.TypeOf((*MockIOrderBook)(nil).GetOrderUserBooks))
}

// GetOrderUserBooksLastMounth mocks base method.
func (m *MockIOrderBook) GetOrderUserBooksLastMounth() ([]model.UserOrderBooksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderUserBooksLastMounth")
	ret0, _ := ret[0].([]model.UserOrderBooksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderUserBooksLastMounth indicates an expected call of GetOrderUserBooksLastMounth.
func (mr *MockIOrderBookMockRecorder) GetOrderUserBooksLastMounth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderUserBooksLastMounth", reflect.TypeOf((*MockIOrderBook)(nil).GetOrderUserBooksLastMounth))
}

// MockIBook is a mock of IBook interface.
type MockIBook struct {
	ctrl     *gomock.Controller
	recorder *MockIBookMockRecorder
}

// MockIBookMockRecorder is the mock recorder for MockIBook.
type MockIBookMockRecorder struct {
	mock *MockIBook
}

// NewMockIBook creates a new mock instance.
func NewMockIBook(ctrl *gomock.Controller) *MockIBook {
	mock := &MockIBook{ctrl: ctrl}
	mock.recorder = &MockIBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBook) EXPECT() *MockIBookMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIBook) Create(book model.BookInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIBookMockRecorder) Create(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIBook)(nil).Create), book)
}

// GetAll mocks base method.
func (m *MockIBook) GetAll() ([]model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIBookMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIBook)(nil).GetAll))
}

// MockIUser is a mock of IUser interface.
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
}

// MockIUserMockRecorder is the mock recorder for MockIUser.
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance.
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockIUser) ChangePassword(user model.ChangePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIUserMockRecorder) ChangePassword(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIUser)(nil).ChangePassword), user)
}

// Create mocks base method.
func (m *MockIUser) Create(user model.UserInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUser)(nil).Create), user)
}

// Delete mocks base method.
func (m *MockIUser) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUser)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockIUser) GetAll() ([]model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIUserMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIUser)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockIUser) GetByID(id int) (model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIUserMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIUser)(nil).GetByID), id)
}

// GetByLogin mocks base method.
func (m *MockIUser) GetByLogin(login string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", login)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockIUserMockRecorder) GetByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockIUser)(nil).GetByLogin), login)
}

// ParseToken mocks base method.
func (m *MockIUser) ParseToken(ctx context.Context, token string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, token)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockIUserMockRecorder) ParseToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockIUser)(nil).ParseToken), ctx, token)
}

// SignIn mocks base method.
func (m *MockIUser) SignIn(user model.SignInInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIUserMockRecorder) SignIn(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIUser)(nil).SignIn), user)
}

// Update mocks base method.
func (m *MockIUser) Update(user model.UserResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUserMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUser)(nil).Update), user)
}
